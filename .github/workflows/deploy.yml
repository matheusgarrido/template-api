name: Docker Deploy to ECR and ECS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies and build
        run: |
          npm ci
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        env:
          ECR_REPOSITORY: party-stories/api
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Ensure CloudWatch log group exists
        run: |
          aws logs describe-log-groups --log-group-name /ecs/party-stories-task || \
          aws logs create-log-group --log-group-name /ecs/party-stories-task

      - name: Register new task definition
        id: taskdef
        env:
          ECR_REPOSITORY: party-stories/api
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          sed "s|<IMAGE>|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" taskdef.json > taskdef-rendered.json
          aws ecs register-task-definition --cli-input-json file://taskdef-rendered.json

      - name: Update ECS service (or create if it doesn't exist)
        env:
          CLUSTER_NAME: party-stories-cluster
          SERVICE_NAME: party-stories-api
          TASK_FAMILY: party-stories-task
        run: |
          if aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME | grep "MISSING"; then
            # Service doesn't exist, create it
            aws ecs create-service \
              --cluster $CLUSTER_NAME \
              --service-name $SERVICE_NAME \
              --task-definition $TASK_FAMILY \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[subnet-publica-1,subnet-publica-2],securityGroups=[sg-xxxxx],assignPublicIp=ENABLED}"
          else
            # Service exists, update it
            aws ecs update-service \
              --cluster $CLUSTER_NAME \
              --service $SERVICE_NAME \
              --force-new-deployment
          fi
