name: Docker Deploy to ECR and ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: party-stories-cluster
  SERVICE_NAME: party-stories-api
  TASK_FAMILY: party-stories-task
  ECR_REPOSITORY: party-stories/api
  DOCKERFILE_PATH: ./infra/docker/Dockerfile
  NODE_VERSION: '20'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Install dependencies and build
        run: |
          npm ci
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG -f ${{ env.DOCKERFILE_PATH }} .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG

      - name: Ensure CloudWatch log group exists
        run: |
          if ! aws logs describe-log-groups --log-group-name-prefix /ecs/${{ env.TASK_FAMILY }} | grep -q "/ecs/${{ env.TASK_FAMILY }}"; then
            aws logs create-log-group --log-group-name /ecs/${{ env.TASK_FAMILY }}
          fi

      - name: Register new task definition
        id: taskdef
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          sed "s|<IMAGE>|$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG|g" taskdef.json > taskdef-rendered.json
          aws ecs register-task-definition --cli-input-json file://taskdef-rendered.json

      - name: Update ECS service (or create if it doesn't exist)
        run: |
          if aws ecs describe-services --cluster ${{ env.CLUSTER_NAME }} --services ${{ env.SERVICE_NAME }} | grep "MISSING"; then
            # Service doesn't exist, create it
            aws ecs create-service \
              --cluster ${{ env.CLUSTER_NAME }} \
              --service-name ${{ env.SERVICE_NAME }} \
              --task-definition ${{ env.TASK_FAMILY }} \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[subnet-publica-1,subnet-publica-2],securityGroups=[sg-xxxxx],assignPublicIp=ENABLED}"
          else
            # Service exists, update it
            aws ecs update-service \
              --cluster ${{ env.CLUSTER_NAME }} \
              --service ${{ env.SERVICE_NAME }} \
              --force-new-deployment
          fi
